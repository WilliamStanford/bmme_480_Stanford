#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Aug 29 15:40:20 2019

@author: williamstanford
"""

# data analysis and wrangling
import pandas as pd
import numpy as np
import random as rnd

# visualization
import seaborn as sns
import matplotlib.pyplot as plt

# import data
train = pd.read_csv('http://bit.ly/kaggletrain')

train.head()
# Histogram of age for train set
print('Historgram of age for training set')
train.Age.plot(kind='hist')

# plot graph with Pclass on x axis and Fare on y axis.
print('Plot of passenger class vs fare for training set')
train.groupby('Pclass').Fare.mean().plot(kind='bar')

# Crosstab Survive and Pclass
pd.crosstab(train.Survived, train.Pclass)

print(pd.crosstab(train.Survived, train.Pclass))

# plot
pd.crosstab(train.Survived, train.Pclass).plot(kind='bar')

train = pd.read_csv('http://bit.ly/kaggletrain')
train.head()

mod_train = train.fillna(train.mean())

# First I built a linear model like you did for Pclass and Parch, but replaced Parch with age
# then I went back and set survival to 1 if age < 10 and Pclass = 1 

# create a feature matrix 'X' by selecting two DataFrame columns
feature_cols = ['Pclass', 'Age']
first_x = train.loc[:, feature_cols]

# replace unknown ages with mean of all age groups
# could look at class specific averages to be more precise
X = first_x.fillna(first_x.mean())

X.head()

# create a response vector 'y' by selecting a Series
y = mod_train.Survived
y.shape

# fit a classification model to the training data
from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression(solver='lbfgs')
logreg.fit(X, y)

# read the testing dataset from Kaggle's Titanic competition into a DataFrame
test = pd.read_csv('http://bit.ly/kaggletest')
test.head()

mod_test = test.fillna(test.mean())

# create a feature matrix from the testing data that matches the training data
X_new = mod_test.loc[:, feature_cols]
X_new.shape

# use the fitted model to make predictions for the testing set observations
new_pred_class = logreg.predict(X_new)

# create a DataFrame of passenger IDs and testing set predictions
Submission = pd.DataFrame({'PassengerId':test.PassengerId, 'Survived':new_pred_class},)

# If age < 10 or Pclass = 1 set Survived = 1
conditional_test = mod_test[(mod_test.Age < 10) | (mod_test.Pclass == 1)]

# Passenger IDs we need to set to survive
Passenger_IDs = conditional_test.PassengerId

condsub = pd.DataFrame({'PassengerId':Passenger_IDs, 'Survived':1})

Submission = Submission.set_index('PassengerId')
condsub = condsub.set_index('PassengerId')
Submission.update(condsub)
Submission.reset_index(inplace=True)

Submission['Survived']= Submission['Survived'].astype(int)

# write the DataFrame to a CSV file that can be submitted to Kaggle
Submission.set_index('PassengerId').to_csv('sub.csv')

# save a DataFrame to disk ("pickle it")
mod_train.to_pickle('mod_train.pkl')